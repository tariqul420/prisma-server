generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum Status {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id String @id @default(uuid())
  clerkUserId String @unique
  email String @unique
  firstName String
  lastName String
  role Role @default(CUSTOMER)
  profilePicture String
  blogs Blog[]
  orders Order[]
  slug String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
  @@index([email])
}

model Blog {
  id String @id @default(uuid())
  title String
  image String
  description String
  content String
  user User @relation(fields: [userId], references: [id])
  userId String
  slug String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("blogs")
}

model Product {
  id String @id @default(uuid())
  title String
  titleBengali String
  shortDesc String
  imageUrls String[]
  regularPrice Float
  salePrice Float
  detailedDesc String
  tag String
  packageDuration String
  weight String
  categories Category[] 
  slug String @unique
  orders Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("products")
}

model Category {
  id String @id @default(uuid())
  name String
  slug String @unique
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("categories")
}

model Order {
  id String @id @default(uuid())
  orderId String @unique
  product Product @relation(fields: [productId], references: [id])
  productId String
  quantity Int
  name String
  phone String
  email String?
  address String
  orderNote String?
  paymentMethod String @default("cash-on-delivery")
  status Status @default(PENDING)
  user User? @relation(fields: [userId], references: [id])
  userId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("orders")
}